{"version":3,"sources":["ng://angular-rave/lib/angular-rave.component.ts","ng://angular-rave/lib/angular-rave.directive.ts","ng://angular-rave/lib/rave-options.ts","ng://angular-rave/lib/angular-rave.module.ts"],"names":["AngularRaveComponent","EventEmitter","prototype","pay","window","getpaidSetup","console","error","this","raveOptions","Object","keys","length","validateOptions","validateInput","insertRaveOptions","_raveOptions","_this","amount","PBFPubKey","payment_method","redirect_url","integrity_hash","pay_button_text","country","currency","custom_description","customer_email","custom_logo","custom_title","customer_firstname","customer_lastname","txref","customer_phone","onclose","emit","callback","res","ngOnInit","Component","args","selector","template","Input","Output","AngularRaveDirective","buttonClick","Directive","HostListener","RaveOptions","_RaveOptions","AngularRaveModule","NgModule","imports","exports","declarations","providers"],"mappings":"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","sourcesContent":["import { Component, OnInit, EventEmitter, Input, Output } from '@angular/core';\nimport { _RaveOptions } from \"./rave-options\";\n\ninterface myWindow extends Window {\n  getpaidSetup: (raveOptions: Partial<_RaveOptions>) => void\n}\n\ndeclare var window: myWindow\n\n@Component({\n  selector: 'angular-rave',\n  template: `<div></div>`\n})\n\nexport class AngularRaveComponent implements OnInit {\n  @Input() PBFPubKey: string;\n  @Input() integrity_hash: string;\n  @Input() txref: string;\n  @Input() payment_method: string;\n  @Input() amount: number;\n  @Input() currency: string;\n  @Input() country: string;\n  @Input() customer_email: string;\n  @Input() customer_phone: string;\n  @Input() customer_firstname: string;\n  @Input() customer_lastname: string;\n  @Input() pay_button_text: string;\n  @Input() custom_title: string;\n  @Input() custom_description: string;\n  @Input() redirect_url: string;\n  @Input() custom_logo: string;\n  @Input() meta: any;\n  @Input() raveOptions: Partial<_RaveOptions>\n  @Output() onclose: EventEmitter<void> = new EventEmitter<void>();\n  @Output() callback: EventEmitter<Object> = new EventEmitter<Object>();\n  private _raveOptions: Partial<_RaveOptions>\n\n  constructor() { }\n\n  pay() {\n    if (typeof window.getpaidSetup !== \"function\") {\n      return console.error(\"ANGULAR-RAVE: Please verify that you imported rave's script into your index.html\")\n    }\n    // If the raveoptions Input is present then use it\n    if (this.raveOptions && Object.keys(this.raveOptions).length > 3) {\n      this.validateOptions() && window.getpaidSetup(this.raveOptions)\n    } else {\n      if (this.validateInput()) {\n        this.insertRaveOptions()\n        window.getpaidSetup(this._raveOptions)\n      }\n    }\n  }\n\n  insertRaveOptions() {\n    this.amount ? this._raveOptions.amount = this.amount : null\n    this.PBFPubKey ? this._raveOptions.PBFPubKey = this.PBFPubKey : null\n    this.payment_method ? this._raveOptions.payment_method = this.payment_method : null\n    this.redirect_url ? this._raveOptions.redirect_url = this.redirect_url : null\n    this.integrity_hash ? this._raveOptions.integrity_hash = this.integrity_hash : null\n    this.pay_button_text ? this._raveOptions.pay_button_text = this.pay_button_text : null\n    this.country ? this._raveOptions.country = this.country : null\n    this.currency ? this._raveOptions.currency = this.currency : null\n    this.custom_description ? this._raveOptions.custom_description = this.custom_description : null\n    this.customer_email ? this._raveOptions.customer_email = this.customer_email : null\n    this.custom_logo ? this._raveOptions.custom_logo = this.custom_logo : null\n    this.custom_title ? this._raveOptions.custom_title = this.custom_title : null\n    this.customer_firstname ? this._raveOptions.customer_firstname = this.customer_firstname : null\n    this.customer_lastname ? this._raveOptions.customer_lastname = this.customer_lastname : null\n    this.txref ? this._raveOptions.txref = this.txref : null\n    this.customer_phone ? this._raveOptions.customer_phone = this.customer_phone : null\n    this.onclose ? this._raveOptions.onclose = () => this.onclose.emit() : null\n    this.callback ? this._raveOptions.callback = (res) => this.onclose.emit(res) : null\n  }\n\n  validateOptions() {\n    if (!this.raveOptions.PBFPubKey) return console.error(\"ANGULAR-RAVE: Merchant public key is required\");\n    if (!(this.raveOptions.customer_email || this.raveOptions.customer_phone)) return console.error(\"ANGULAR-RAVE: Customer email or phone number is required\");\n    if (!this.raveOptions.txref) return console.error(\"ANGULAR-RAVE: A unique transaction reference is required\")\n    if (!this.raveOptions.amount) return console.error(\"ANGULAR-RAVE: Amount to charge is required\")\n    if (!this.callback) return console.error(\"ANGULAR-RAVE: You should attach to callback to verify your transaction\")\n    // Remove callback and onClose from options\n    if (typeof this.raveOptions.callback === \"function\") {\n      delete this.raveOptions.callback\n    }\n    if (typeof this.raveOptions.onclose === \"function\") {\n      delete this.raveOptions.onclose\n    }\n    this.raveOptions.onclose = () => this.onclose.emit()\n    this.raveOptions.callback = res => this.callback.emit(res)\n    return true\n  }\n\n  validateInput() {\n    if (!this.PBFPubKey) return console.error(\"ANGULAR-RAVE: Merchant public key is required\");\n    if (!(this.customer_email || this.customer_phone)) return console.error(\"ANGULAR-RAVE: Customer email or phone number is required\");\n    if (!this.txref) return console.error(\"ANGULAR-RAVE: A unique transaction reference is required\")\n    if (!this.amount) return console.error(\"ANGULAR-RAVE: Amount to charge is required\")\n    if (!this.callback) return console.error(\"ANGULAR-RAVE: You should attach to callback to verify your transaction\")\n    return true\n  }\n\n  ngOnInit() {\n    this.pay()\n  }\n}","import { Directive, Input, Output, HostListener, EventEmitter } from \"@angular/core\";\n\nimport { _RaveOptions } from \"./rave-options\";\n\ninterface MyWindow extends Window {\n  getpaidSetup: (raveOptions: Partial<_RaveOptions>) => void\n}\n\ndeclare var window: MyWindow\n\n@Directive({\n  selector: '[angular-rave]'\n})\nexport class AngularRaveDirective {\n  @Input() PBFPubKey: string;\n  @Input() integrity_hash: string;\n  @Input() txref: string;\n  @Input() payment_method: string;\n  @Input() amount: number;\n  @Input() currency: string;\n  @Input() country: string;\n  @Input() customer_email: string;\n  @Input() customer_phone: string;\n  @Input() customer_firstname: string;\n  @Input() customer_lastname: string;\n  @Input() pay_button_text: string;\n  @Input() custom_title: string;\n  @Input() custom_description: string;\n  @Input() redirect_url: string;\n  @Input() custom_logo: string;\n  @Input() meta: any;\n  @Input() raveOptions: Partial<_RaveOptions> = {}\n  @Output() onclose: EventEmitter<void> = new EventEmitter<void>();\n  @Output() callback: EventEmitter<any> = new EventEmitter<any>();\n  private _raveOptions: Partial<_RaveOptions> = {}\n\n  constructor() { }\n\n  @HostListener('click')\n  buttonClick() {\n    this.pay()\n  }\n\n  pay() {\n    if (typeof window.getpaidSetup !== \"function\") {\n      return console.error(\"ANGULAR-RAVE: Please verify that you imported rave's script into your index.html\")\n    }\n    // If the raveoptions Input is present then use\n    if (this.raveOptions && Object.keys(this.raveOptions).length > 3) {\n      this.validateOptions && window.getpaidSetup(this.raveOptions)\n    } else {\n      if (this.validateInput()) {\n        this.insertRaveOptions()\n        window.getpaidSetup(this._raveOptions)\n      }\n    }\n  }\n\n  insertRaveOptions() {\n    this.amount ? this._raveOptions.amount = this.amount : null\n    this.PBFPubKey ? this._raveOptions.PBFPubKey = this.PBFPubKey : null\n    this.payment_method ? this._raveOptions.payment_method = this.payment_method : null\n    this.redirect_url ? this._raveOptions.redirect_url = this.redirect_url : null\n    this.integrity_hash ? this._raveOptions.integrity_hash = this.integrity_hash : null\n    this.pay_button_text ? this._raveOptions.pay_button_text = this.pay_button_text : null\n    this.country ? this._raveOptions.country = this.country : null\n    this.currency ? this._raveOptions.currency = this.currency : null\n    this.custom_description ? this._raveOptions.custom_description = this.custom_description : null\n    this.customer_email ? this._raveOptions.customer_email = this.customer_email : null\n    this.custom_logo ? this._raveOptions.custom_logo = this.custom_logo : null\n    this.custom_title ? this._raveOptions.custom_title = this.custom_title : null\n    this.customer_firstname ? this._raveOptions.customer_firstname = this.customer_firstname : null\n    this.customer_lastname ? this._raveOptions.customer_lastname = this.customer_lastname : null\n    this.customer_phone ? this._raveOptions.customer_phone = this.customer_phone : null\n    this.txref ? this._raveOptions.txref = this.txref : null\n    this.onclose ? this._raveOptions.onclose = () => this.onclose.emit() : null\n    this.callback ? this._raveOptions.callback = res => this.callback.emit(res) : null\n  }\n\n  validateOptions() {\n    if (!this.raveOptions.PBFPubKey) return console.error(\"ANGULAR-RAVE: Merchant public key is required\");\n    if (!(this.raveOptions.customer_email || this.raveOptions.customer_phone)) return console.error(\"ANGULAR-RAVE: Customer email or phone number is required\");\n    if (!this.raveOptions.txref) return console.error(\"ANGULAR-RAVE: A unique transaction reference is required\")\n    if (!this.raveOptions.amount) return console.error(\"ANGULAR-RAVE: Amount to charge is required\")\n    if (!this.callback) return console.error(\"ANGULAR-RAVE: You should attach to callback to verify your transaction\")\n    // Remove callback and onClose from options\n    if (typeof this.raveOptions.callback === \"function\") {\n      delete this.raveOptions.callback\n    }\n    if (typeof this.raveOptions.onclose === \"function\") {\n      delete this.raveOptions.onclose\n    }\n    this.raveOptions.onclose = () => this.onclose.emit()\n    this.raveOptions.callback = res => this.callback.emit(res)\n    return true\n  }\n\n  validateInput() {\n    if (!this.PBFPubKey) return console.error(\"ANGULAR-RAVE: Merchant public key is required\");\n    if (!(this.customer_email || this.customer_phone)) return console.error(\"ANGULAR-RAVE: Customer email or phone number is required\");\n    if (!this.txref) return console.error(\"ANGULAR-RAVE: A unique transaction reference is required\")\n    if (!this.amount) return console.error(\"ANGULAR-RAVE: Amount to charge is required\")\n    if (!this.callback) return console.error(\"ANGULAR-RAVE: You should attach to callback to verify your transaction\")\n    return true\n  }\n\n}","export class RaveOptions {\n  /**\n   * Your merchant public key provided when you create a button\n   */\n  PBFPubKey: string\n  /**\n   * Email of the customer\n   */\n  customer_email?: string\n  /**\n   * Firstname of the customer\n   */\n  customer_firstname?: string\n  /**\n   * firstname of the customer\n   */\n  customer_lastname?: string\n  /**\n   * Text to be displayed as a short modal description\n   */\n  custom_description?: string\n  /**\n   * Link to your custom image\n   */\n  custom_logo?: string\n  /**\n   * Text to be displayed as the title of the payment modal\n   */\n  custom_title?: string\n  /**\n   * Amount to charge\n   */\n  amount: number\n  /**\n   * phone number of the customer\n   */\n  customer_phone?: string\n  /**\n   * URL to redirect to when transaction is completed.\n   */\n  redirect_url?: string\n  /**\n   * route country. Default NG\n   */\n  country?: string\n  /**\n   * currency to charge the card in. Default \"NGN\"\n   */\n  currency?: string\n  /**\n   * This allows you select the payment option you want for your users, possible values are card, account or both\n   */\n  payment_method?: string\n  /**\n   * Text to be displayed on the Rave Checkout Button\n   */\n  pay_button_text?: string\n  /**\n   * Unique transaction reference provided by the merchant\n   */\n  txref: string\n  /**\n   * This is a sha256 hash of your getpaidSetup values, it is used for passing secured values to the payment gateway\n   */\n  integrity_hash?: string\n  /**\n   * The value to be passed for this is 1. This is useful when customer is using an opera browser, it would load the payment modal on a new page.\n   */\n  hosted_payment?: 1\n  /**\n   * Any other custom data you wish to pass.\n   */\n  meta?: any\n}\n\nexport class _RaveOptions {\n  /**\n   * Your merchant public key provided when you create a button\n   */\n  PBFPubKey: string\n  /**\n   * Email of the customer\n   */\n  customer_email?: string\n  /**\n   * Firstname of the customer\n   */\n  customer_firstname?: string\n  /**\n   * firstname of the customer\n   */\n  customer_lastname?: string\n  /**\n   * Text to be displayed as a short modal description\n   */\n  custom_description?: string\n  /**\n   * Link to your custom image\n   */\n  custom_logo?: string\n  /**\n   * Text to be displayed as the title of the payment modal\n   */\n  custom_title?: string\n  /**\n   * Amount to charge\n   */\n  amount: number\n  /**\n   * phone number of the customer\n   */\n  customer_phone?: string\n  /**\n   * URL to redirect to when transaction is completed.\n   */\n  redirect_url?: string\n  /**\n   * route country. Default NG\n   */\n  country?: string\n  /**\n   * currency to charge the card in. Default \"NGN\"\n   */\n  currency?: string\n  /**\n   * This allows you select the payment option you want for your users, possible values are card, account or both\n   */\n  payment_method?: string\n  /**\n   * Text to be displayed on the Rave Checkout Button\n   */\n  pay_button_text?: string\n  /**\n   * Unique transaction reference provided by the merchant\n   */\n  txref: string\n  /**\n   * This is a sha256 hash of your getpaidSetup values, it is used for passing secured values to the payment gateway\n   */\n  integrity_hash?: string\n  /**\n   * The value to be passed for this is 1. This is useful when customer is using an opera browser, it would load the payment modal on a new page.\n   */\n  hosted_payment?: 1\n  /**\n   * Any other custom data you wish to pass.\n   */\n  meta?: any\n  /**\n   * A function to be called on successful card charge. Userâs can always be redirected to a successful or failed page supplied by the merchant here based on response\n   * @param response?: The server response\n   */\n  callback: (response?: any) => void\n  /**\n   * A function to be called when the pay modal is closed.\n   */\n  onclose: () => void\n}","import { NgModule } from '@angular/core';\n\nimport { AngularRaveComponent } from './angular-rave.component';\nimport { AngularRaveDirective } from \"./angular-rave.directive\";\n\n@NgModule({\n  imports: [],\n  exports: [AngularRaveComponent, AngularRaveDirective],\n  declarations: [AngularRaveComponent, AngularRaveDirective],\n  providers: [],\n})\nexport class AngularRaveModule { }\n"]}