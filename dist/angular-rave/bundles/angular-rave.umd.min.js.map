{"version":3,"sources":["ng://angular-rave/lib/angular-rave.component.ts","ng://angular-rave/lib/angular-rave.directive.ts","ng://angular-rave/lib/rave-options.ts","ng://angular-rave/lib/angular-rave.module.ts"],"names":["AngularRaveComponent","EventEmitter","prototype","pay","window","getpaidSetup","console","error","this","raveOptions","Object","keys","length","validateOptions","validateInput","insertRaveOptions","_raveOptions","_this","amount","PBFPubKey","payment_method","redirect_url","integrity_hash","pay_button_text","country","currency","custom_description","customer_email","custom_logo","custom_title","customer_firstname","subaccount","customer_lastname","txref","customer_phone","onclose","emit","callback","res","observers","ngOnInit","Component","args","selector","template","Input","Output","AngularRaveDirective","buttonClick","Directive","HostListener","RaveOptions","AngularRaveModule","_super","tslib_1.__extends","NgModule","imports","exports","declarations","providers"],"mappings":"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","sourcesContent":["import { Component, OnInit, EventEmitter, Input, Output } from '@angular/core';\nimport { PrivateRaveOptions } from './rave-options';\n\ninterface MyWindow extends Window {\n  getpaidSetup: (raveOptions: Partial<PrivateRaveOptions>) => void;\n}\n\ndeclare var window: MyWindow;\n\n@Component({\n  selector: 'angular-rave',\n  template: `<ng-content></ng-content>`\n})\n\nexport class AngularRaveComponent implements OnInit {\n  @Input() PBFPubKey: string;\n  @Input() integrity_hash: string;\n  @Input() txref: string;\n  @Input() payment_method: string;\n  @Input() amount: number;\n  @Input() currency: string;\n  @Input() country: string;\n  @Input() customer_email: string;\n  @Input() customer_phone: string;\n  @Input() customer_firstname: string;\n  @Input() customer_lastname: string;\n  @Input() subaccount: { id: string, transaction_split_ratio: string }[];\n  @Input() pay_button_text: string;\n  @Input() custom_title: string;\n  @Input() custom_description: string;\n  @Input() redirect_url: string;\n  @Input() custom_logo: string;\n  @Input() meta: any;\n  @Input() raveOptions: Partial<PrivateRaveOptions>;\n  @Output() onclose: EventEmitter<void> = new EventEmitter<void>();\n  @Output() callback: EventEmitter<Object> = new EventEmitter<Object>();\n  private _raveOptions: Partial<PrivateRaveOptions> = {};\n\n  constructor() { }\n\n  pay() {\n    if (typeof window.getpaidSetup !== 'function') {\n      return console.error('ANGULAR-RAVE: Please verify that you imported rave\\'s script into your index.html');\n    }\n    // If the raveoptions Input is present then use it\n    if (this.raveOptions && Object.keys(this.raveOptions).length > 3) {\n      if (this.validateOptions()) {\n        window.getpaidSetup(this.raveOptions);\n      }\n    } else {\n      if (this.validateInput()) {\n        this.insertRaveOptions();\n        window.getpaidSetup(this._raveOptions);\n      }\n    }\n  }\n\n  insertRaveOptions() {\n    if (this.amount) { this._raveOptions.amount = this.amount; }\n    if (this.PBFPubKey) { this._raveOptions.PBFPubKey = this.PBFPubKey; }\n    if (this.payment_method) { this._raveOptions.payment_method = this.payment_method; }\n    if (this.redirect_url) { this._raveOptions.redirect_url = this.redirect_url; }\n    if (this.integrity_hash) { this._raveOptions.integrity_hash = this.integrity_hash; }\n    if (this.pay_button_text) { this._raveOptions.pay_button_text = this.pay_button_text; }\n    if (this.country) { this._raveOptions.country = this.country; }\n    if (this.currency) { this._raveOptions.currency = this.currency; }\n    if (this.custom_description) { this._raveOptions.custom_description = this.custom_description; }\n    if (this.customer_email) { this._raveOptions.customer_email = this.customer_email; }\n    if (this.custom_logo) { this._raveOptions.custom_logo = this.custom_logo; }\n    if (this.custom_title) { this._raveOptions.custom_title = this.custom_title; }\n    if (this.customer_firstname) { this._raveOptions.customer_firstname = this.customer_firstname; }\n    if (this.subaccount) { this._raveOptions.subaccount = this.subaccount; }\n    if (this.customer_lastname) { this._raveOptions.customer_lastname = this.customer_lastname; }\n    if (this.txref) { this._raveOptions.txref = this.txref; }\n    if (this.customer_phone) { this._raveOptions.customer_phone = this.customer_phone; }\n    if (this.onclose) { this._raveOptions.onclose = () => this.onclose.emit(); }\n    if (this.callback) { this._raveOptions.callback = (res) => this.onclose.emit(res); }\n  }\n\n  validateOptions() {\n    if (!this.raveOptions.PBFPubKey) { return console.error('ANGULAR-RAVE: Merchant public key is required'); }\n    if (!(this.raveOptions.customer_email || this.raveOptions.customer_phone)) {\n      return console.error('ANGULAR-RAVE: Customer email or phone number is required');\n    }\n    if (!this.raveOptions.txref) { return console.error('ANGULAR-RAVE: A unique transaction reference is required'); }\n    if (!this.raveOptions.amount) { return console.error('ANGULAR-RAVE: Amount to charge is required'); }\n    if (!this.callback.observers.length) { return console.error('ANGULAR-RAVE: You should attach to callback to verify your transaction'); }\n    if (this.onclose.observers.length) { this.raveOptions.onclose = () => this.onclose.emit(); }\n    this.raveOptions.callback = res => this.callback.emit(res);\n    return true;\n  }\n\n  validateInput() {\n    if (!this.PBFPubKey) { return console.error('ANGULAR-RAVE: Merchant public key is required'); }\n    if (!(this.customer_email || this.customer_phone)) { return console.error('ANGULAR-RAVE: Customer email or phone number is required'); }\n    if (!this.txref) { return console.error('ANGULAR-RAVE: A unique transaction reference is required'); }\n    if (!this.amount) { return console.error('ANGULAR-RAVE: Amount to charge is required'); }\n    if (!this.callback) { return console.error('ANGULAR-RAVE: You should attach to callback to verify your transaction'); }\n    return true;\n  }\n\n  ngOnInit() {\n    this.pay();\n  }\n}\n","import { Directive, Input, Output, HostListener, EventEmitter } from '@angular/core';\n\nimport { PrivateRaveOptions } from './rave-options';\n\ninterface MyWindow extends Window {\n  getpaidSetup: (raveOptions: Partial<PrivateRaveOptions>) => void;\n}\n\ndeclare var window: MyWindow;\n\n@Directive({\n  selector: '[angular-rave]'\n})\nexport class AngularRaveDirective {\n  @Input() PBFPubKey: string;\n  @Input() integrity_hash: string;\n  @Input() txref: string;\n  @Input() payment_method: string;\n  @Input() amount: number;\n  @Input() currency: string;\n  @Input() country: string;\n  @Input() customer_email: string;\n  @Input() customer_phone: string;\n  @Input() customer_firstname: string;\n  @Input() customer_lastname: string;\n  @Input() pay_button_text: string;\n  @Input() custom_title: string;\n  @Input() subaccount: { id: string, transaction_split_ratio: string }[];\n  @Input() custom_description: string;\n  @Input() redirect_url: string;\n  @Input() custom_logo: string;\n  @Input() meta: any;\n  @Input() raveOptions: Partial<PrivateRaveOptions> = {};\n  @Output() onclose: EventEmitter<void> = new EventEmitter<void>();\n  @Output() callback: EventEmitter<any> = new EventEmitter<any>();\n  private _raveOptions: Partial<PrivateRaveOptions> = {};\n\n  constructor() { }\n\n  @HostListener('click')\n  buttonClick() {\n    this.pay();\n  }\n\n  pay() {\n    if (typeof window.getpaidSetup !== 'function') {\n      return console.error('ANGULAR-RAVE: Please verify that you imported rave\\'s script into your index.html');\n    }\n    // If the raveoptions Input is present then use\n    if (this.raveOptions && Object.keys(this.raveOptions).length > 3) {\n      if (this.validateOptions()) {\n        window.getpaidSetup(this.raveOptions);\n      }\n    } else {\n      if (this.validateInput()) {\n        this.insertRaveOptions();\n        window.getpaidSetup(this._raveOptions);\n      }\n    }\n  }\n\n  insertRaveOptions() {\n    if (this.amount) { this._raveOptions.amount = this.amount; }\n    if (this.PBFPubKey) { this._raveOptions.PBFPubKey = this.PBFPubKey; }\n    if (this.payment_method) { this._raveOptions.payment_method = this.payment_method; }\n    if (this.redirect_url) { this._raveOptions.redirect_url = this.redirect_url; }\n    if (this.integrity_hash) { this._raveOptions.integrity_hash = this.integrity_hash; }\n    if (this.pay_button_text) { this._raveOptions.pay_button_text = this.pay_button_text; }\n    if (this.country) { this._raveOptions.country = this.country; }\n    if (this.currency) { this._raveOptions.currency = this.currency; }\n    if (this.custom_description) { this._raveOptions.custom_description = this.custom_description; }\n    if (this.customer_email) { this._raveOptions.customer_email = this.customer_email; }\n    if (this.custom_logo) { this._raveOptions.custom_logo = this.custom_logo; }\n    if (this.custom_title) { this._raveOptions.custom_title = this.custom_title; }\n    if (this.customer_firstname) { this._raveOptions.customer_firstname = this.customer_firstname; }\n    if (this.customer_lastname) { this._raveOptions.customer_lastname = this.customer_lastname; }\n    if (this.subaccount) { this._raveOptions.subaccount = this.subaccount; }\n    if (this.customer_phone) { this._raveOptions.customer_phone = this.customer_phone; }\n    if (this.txref) { this._raveOptions.txref = this.txref; }\n    if (this.onclose) { this._raveOptions.onclose = () => this.onclose.emit(); }\n    if (this.callback) { this._raveOptions.callback = res => this.callback.emit(res); }\n  }\n\n  validateOptions() {\n    if (!this.raveOptions.PBFPubKey) { return console.error('ANGULAR-RAVE: Merchant public key is required'); }\n    if (!(this.raveOptions.customer_email || this.raveOptions.customer_phone)) {\n      return console.error('ANGULAR-RAVE: Customer email or phone number is required');\n    }\n    if (!this.raveOptions.txref) { return console.error('ANGULAR-RAVE: A unique transaction reference is required'); }\n    if (!this.raveOptions.amount) { return console.error('ANGULAR-RAVE: Amount to charge is required'); }\n    if (!this.callback.observers.length) { return console.error('ANGULAR-RAVE: You should attach to callback to verify your transaction'); }\n    if (this.onclose.observers.length) { this.raveOptions.onclose = () => this.onclose.emit(); }\n    this.raveOptions.callback = res => this.callback.emit(res);\n    return true;\n  }\n\n  validateInput() {\n    if (!this.PBFPubKey) { return console.error('ANGULAR-RAVE: Merchant public key is required'); }\n    if (!(this.customer_email || this.customer_phone)) { return console.error('ANGULAR-RAVE: Customer email or phone number is required'); }\n    if (!this.txref) { return console.error('ANGULAR-RAVE: A unique transaction reference is required'); }\n    if (!this.amount) { return console.error('ANGULAR-RAVE: Amount to charge is required'); }\n    if (!this.callback) { return console.error('ANGULAR-RAVE: You should attach to callback to verify your transaction'); }\n    return true;\n  }\n\n}\n","export class RaveOptions {\n  /**\n   * Your merchant public key provided when you create a button\n   */\n  PBFPubKey: string;\n  /**\n   * Email of the customer\n   */\n  customer_email?: string;\n  /**\n   * Firstname of the customer\n   */\n  customer_firstname?: string;\n  /**\n   * firstname of the customer\n   */\n  customer_lastname?: string;\n  /**\n   * Text to be displayed as a short modal description\n   */\n  custom_description?: string;\n  /**\n   * Link to your custom image\n   */\n  custom_logo?: string;\n  /**\n   * Text to be displayed as the title of the payment modal\n   */\n  custom_title?: string;\n  /**\n   * Amount to charge\n   */\n  amount: number;\n  /**\n   * phone number of the customer\n   */\n  customer_phone?: string;\n  /**\n   * URL to redirect to when transaction is completed.\n   */\n  redirect_url?: string;\n  /**\n   * route country. Default NG\n   */\n  country?: string;\n  /**\n   * currency to charge the card in. Default \"NGN\"\n   */\n  currency?: string;\n  /**\n   * This allows you select the payment option you want for your users, possible values are card, account or both\n   */\n  payment_method?: string;\n  /**\n   * Text to be displayed on the Rave Checkout Button\n   */\n  pay_button_text?: string;\n  /**\n   * Unique transaction reference provided by the merchant\n   */\n  txref: string;\n  /**\n   * This is a sha256 hash of your getpaidSetup values, it is used for passing secured values to the payment gateway\n   */\n  integrity_hash?: string;\n  /**\n   * The value to be passed for this is 1. This is useful when customer is using an opera browser, it\n   * would load the payment modal on a new page.\n   */\n  hosted_payment?: 1;\n  /**\n   * Any other custom data you wish to pass.\n   */\n  meta?: any;\n  /**\n   * Subaccounts to split payment with\n   * https://developer.flutterwave.com/v2.0/docs/split-payment\n   */\n  subaccount?: { id: string, transaction_split_ratio: string }[];\n}\n\nexport class PrivateRaveOptions extends RaveOptions {\n  /**\n   * A function to be called on successful card charge. Userâs can always be redirected to a successful or\n   * failed page supplied by the merchant here based on response\n   * @param response?: The server response\n   */\n  callback: (response?: any) => void;\n  /**\n   * A function to be called when the pay modal is closed.\n   */\n  onclose: () => void;\n}\n","import { NgModule } from '@angular/core';\n\nimport { AngularRaveComponent } from './angular-rave.component';\nimport { AngularRaveDirective } from './angular-rave.directive';\n\n@NgModule({\n  imports: [],\n  exports: [AngularRaveComponent, AngularRaveDirective],\n  declarations: [AngularRaveComponent, AngularRaveDirective],\n  providers: [],\n})\nexport class AngularRaveModule { }\n"]}