{"version":3,"file":"angular-rave.js.map","sources":["ng://angular-rave/lib/angular-rave.service.ts","ng://angular-rave/lib/angular-rave.component.ts","ng://angular-rave/lib/angular-rave.directive.ts","ng://angular-rave/lib/rave-options.ts","ng://angular-rave/lib/angular-rave.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularRaveService {\n\n  constructor() { }\n}\n","import { Component, OnInit, EventEmitter, Input, Output } from '@angular/core';\nimport { _RaveOptions } from \"./rave-options\";\n\ninterface myWindow extends Window {\n  getpaidSetup: (raveOptions: Partial<_RaveOptions>) => void\n}\n\ndeclare var window: myWindow\n\n@Component({\n  selector: 'angular-rave',\n  template: `<div></div>`\n})\n\nexport class AngularRaveComponent implements OnInit {\n  @Input() PBFPubKey: string;\n  @Input() integrity_hash: string;\n  @Input() txref: string;\n  @Input() payment_method: string;\n  @Input() amount: number;\n  @Input() currency: string;\n  @Input() country: string;\n  @Input() customer_email: string;\n  @Input() customer_phone: string;\n  @Input() customer_firstname: string;\n  @Input() customer_lastname: string;\n  @Input() pay_button_text: string;\n  @Input() custom_title: string;\n  @Input() custom_description: string;\n  @Input() redirect_url: string;\n  @Input() custom_logo: string;\n  @Input() meta: any;\n  @Input() raveOptions:Partial<_RaveOptions>\n  @Output() onclose: EventEmitter<void> = new EventEmitter<void>();\n  @Output() callback: EventEmitter<Object> = new EventEmitter<Object>();\n  private _raveOptions: Partial<_RaveOptions>\n\n  constructor() { }\n\n\n  pay() {\n    if (typeof window.getpaidSetup !== \"function\") {\n      return console.error(\"Please verify that you imported rave's script into your index.html\")\n    }\n    // If the raveoptions Input is present then use\n    if (this.raveOptions && Object.keys(this.raveOptions).length > 3) {\n      if (!this.validateOptions()) {\n        return\n      }\n      window.getpaidSetup(this.raveOptions)\n    } else {\n      if (!this.validateInput()) {\n        return\n      }\n      this.insertRaveOptions()\n      window.getpaidSetup(this._raveOptions)\n    }\n  }\n\n  insertRaveOptions() {\n    this.amount ? this._raveOptions.amount = this.amount : null\n    this.PBFPubKey ? this._raveOptions.PBFPubKey = this.PBFPubKey : null\n    this.payment_method ? this._raveOptions.payment_method = this.payment_method : null\n    this.redirect_url ? this._raveOptions.redirect_url = this.redirect_url : null\n    this.integrity_hash ? this._raveOptions.integrity_hash = this.integrity_hash : null\n    this.pay_button_text ? this._raveOptions.pay_button_text = this.pay_button_text : null\n    this.country ? this._raveOptions.country = this.country : null\n    this.currency ? this._raveOptions.currency = this.currency : null\n    this.custom_description ? this._raveOptions.custom_description = this.custom_description : null\n    this.customer_email ? this._raveOptions.customer_email = this.customer_email : null\n    this.custom_logo ? this._raveOptions.custom_logo = this.custom_logo : null\n    this.custom_title ? this._raveOptions.custom_title = this.custom_title : null\n    this.customer_firstname ? this._raveOptions.customer_firstname = this.customer_firstname : null\n    this.customer_lastname ? this._raveOptions.customer_lastname = this.customer_lastname : null\n    this.txref ? this._raveOptions.txref = this.txref : null    \n    this.customer_phone ? this._raveOptions.customer_phone = this.customer_phone : null\n    this.onclose ? this._raveOptions.onclose = () => this.onclose.emit() : null\n    this.callback ? this._raveOptions.callback = (res) => this.onclose.emit(res) : null\n  }\n\n  validateOptions() {\n    if (!this.raveOptions.PBFPubKey) return console.error(\"Merchant public key is required\");\n    if (!(this.raveOptions.customer_email || this.raveOptions.customer_phone)) return console.error(\"Customer email or phone number is required\");\n    if (!this.raveOptions.txref) return console.error(\"A unique transaction reference is required\")\n    if (!this.raveOptions.amount) return console.error(\"Amount to charge is required\")\n    // Remove callback and onClose from options\n    if (typeof this.raveOptions.callback === \"function\") {\n      delete this.raveOptions.callback\n    }\n    if (typeof this.raveOptions.onclose === \"function\") {\n      delete this.raveOptions.onclose\n    }\n    this.raveOptions.onclose = () => this.onclose.emit()\n    this.raveOptions.callback = (res) => this.onclose.emit(res)\n    if (!this.callback) return console.error(\"You should attach to callback to verify your transaction\")\n    return true\n  }\n\n  validateInput() {\n    if (!this.PBFPubKey) return console.error(\"Merchant public key is required\");\n    if (!(this.customer_email || this.customer_phone)) return console.error(\"Customer email or phone number is required\");\n    if (!this.txref) return console.error(\"A unique transaction reference is required\")\n    if (!this.amount) return console.error(\"Amount to charge is required\")\n    if (!this.callback) return console.error(\"You should attach to callback to verify your transaction\")\n    return true\n  }\n\n  ngOnInit() {\n    this.pay()\n  }\n}","import { Directive, Input, Output, HostListener, EventEmitter } from \"@angular/core\";\n\nimport { _RaveOptions } from \"./rave-options\";\n\ninterface MyWindow extends Window {\n  getpaidSetup: (raveOptions: Partial<_RaveOptions>) => void\n}\n\ndeclare var window: MyWindow\n\n@Directive({\n  selector: '[angular-rave]'\n})\nexport class AngularRaveDirective {\n  @Input() PBFPubKey: string;\n  @Input() integrity_hash: string;\n  @Input() txref: string;\n  @Input() payment_method: string;\n  @Input() amount: number;\n  @Input() currency: string;\n  @Input() country: string;\n  @Input() customer_email: string;\n  @Input() customer_phone: string;\n  @Input() customer_firstname: string;\n  @Input() customer_lastname: string;\n  @Input() pay_button_text: string;\n  @Input() custom_title: string;\n  @Input() custom_description: string;\n  @Input() redirect_url: string;\n  @Input() custom_logo: string;\n  @Input() meta: any;\n  @Input() raveOptions: Partial<_RaveOptions> = {}\n  @Output() onclose: EventEmitter<void> = new EventEmitter<void>();\n  @Output() callback: EventEmitter<Object> = new EventEmitter<Object>();\n  private _raveOptions: Partial<_RaveOptions> = {}\n\n  constructor() { }\n\n  @HostListener('click')\n  buttonClick() {\n    this.pay()\n  }\n\n  pay() {\n    if (typeof window.getpaidSetup !== \"function\") {\n      return console.error(\"Please verify that you imported rave's script into your index.html\")\n    }\n    // If the raveoptions Input is present then use\n    if (this.raveOptions && Object.keys(this.raveOptions).length > 3) {\n      if (!this.validateOptions()) {\n        return\n      }\n      window.getpaidSetup(this.raveOptions)\n    } else {\n      if (!this.validateInput()) {\n        return\n      }\n      this.insertRaveOptions()\n      window.getpaidSetup(this._raveOptions)\n    }\n  }\n\n  insertRaveOptions() {\n    this.amount ? this._raveOptions.amount = this.amount : null\n    this.PBFPubKey ? this._raveOptions.PBFPubKey = this.PBFPubKey : null\n    this.payment_method ? this._raveOptions.payment_method = this.payment_method : null\n    this.redirect_url ? this._raveOptions.redirect_url = this.redirect_url : null\n    this.integrity_hash ? this._raveOptions.integrity_hash = this.integrity_hash : null\n    this.pay_button_text ? this._raveOptions.pay_button_text = this.pay_button_text : null\n    this.country ? this._raveOptions.country = this.country : null\n    this.currency ? this._raveOptions.currency = this.currency : null\n    this.custom_description ? this._raveOptions.custom_description = this.custom_description : null\n    this.customer_email ? this._raveOptions.customer_email = this.customer_email : null\n    this.custom_logo ? this._raveOptions.custom_logo = this.custom_logo : null\n    this.custom_title ? this._raveOptions.custom_title = this.custom_title : null\n    this.customer_firstname ? this._raveOptions.customer_firstname = this.customer_firstname : null\n    this.customer_lastname ? this._raveOptions.customer_lastname = this.customer_lastname : null\n    this.customer_phone ? this._raveOptions.customer_phone = this.customer_phone : null\n    this.txref ? this._raveOptions.txref = this.txref : null\n    this.onclose ? this._raveOptions.onclose = () => this.onclose.emit() : null\n    this.callback ? this._raveOptions.callback = (res) => this.onclose.emit(res) : null\n  }\n\n  validateOptions() {\n    if (!this.raveOptions.PBFPubKey) return console.error(\"Merchant public key is required\");\n    if (!(this.raveOptions.customer_email || this.raveOptions.customer_phone)) return console.error(\"Customer email or phone number is required\");\n    if (!this.raveOptions.txref) return console.error(\"A unique transaction reference is required\")\n    if (!this.raveOptions.amount) return console.error(\"Amount to charge is required\")\n    // Remove callback and onClose from options\n    if (typeof this.raveOptions.callback === \"function\") {\n      delete this.raveOptions.callback\n    }\n    if (typeof this.raveOptions.onclose === \"function\") {\n      delete this.raveOptions.onclose\n    }\n    this.raveOptions.onclose = () => this.onclose.emit()\n    this.raveOptions.callback = (res) => this.onclose.emit(res)\n    if (!this.callback) return console.error(\"You should attach to callback to verify your transaction\")\n    return true\n  }\n\n  validateInput() {\n    if (!this.PBFPubKey) return console.error(\"Merchant public key is required\");\n    if (!(this.customer_email || this.customer_phone)) return console.error(\"Customer email or phone number is required\");\n    if (!this.txref) return console.error(\"A unique transaction reference is required\")\n    if (!this.amount) return console.error(\"Amount to charge is required\")\n    if (!this.callback) return console.error(\"You should attach to callback to verify your transaction\")\n    return true\n  }\n\n}","export class RaveOptions {\n  /**\n   * Your merchant public key provided when you create a button\n   */\n  PBFPubKey: string\n  /**\n   * Email of the customer\n   */\n  customer_email?: string\n  /**\n   * Firstname of the customer\n   */\n  customer_firstname?: string\n  /**\n   * firstname of the customer\n   */\n  customer_lastname?: string\n  /**\n   * Text to be displayed as a short modal description\n   */\n  custom_description?: string\n  /**\n   * Link to your custom image\n   */\n  custom_logo?: string\n  /**\n   * Text to be displayed as the title of the payment modal\n   */\n  custom_title?: string\n  /**\n   * Amount to charge\n   */\n  amount: number\n  /**\n   * phone number of the customer\n   */\n  customer_phone?: string\n  /**\n   * URL to redirect to when transaction is completed.\n   */\n  redirect_url?: string\n  /**\n   * route country. Default NG\n   */\n  country?: string\n  /**\n   * currency to charge the card in. Default \"NGN\"\n   */\n  currency?: string\n  /**\n   * This allows you select the payment option you want for your users, possible values are card, account or both\n   */\n  payment_method?: string\n  /**\n   * Text to be displayed on the Rave Checkout Button\n   */\n  pay_button_text?: string\n  /**\n   * Unique transaction reference provided by the merchant\n   */\n  txref: string\n  /**\n   * This is a sha256 hash of your getpaidSetup values, it is used for passing secured values to the payment gateway\n   */\n  integrity_hash?: string\n  /**\n   * The value to be passed for this is 1. This is useful when customer is using an opera browser, it would load the payment modal on a new page.\n   */\n  hosted_payment?: 1\n  /**\n   * Any other custom data you wish to pass.\n   */\n  meta?: any\n}\n\nexport class _RaveOptions {\n  /**\n   * Your merchant public key provided when you create a button\n   */\n  PBFPubKey: string\n  /**\n   * Email of the customer\n   */\n  customer_email?: string\n  /**\n   * Firstname of the customer\n   */\n  customer_firstname?: string\n  /**\n   * firstname of the customer\n   */\n  customer_lastname?: string\n  /**\n   * Text to be displayed as a short modal description\n   */\n  custom_description?: string\n  /**\n   * Link to your custom image\n   */\n  custom_logo?: string\n  /**\n   * Text to be displayed as the title of the payment modal\n   */\n  custom_title?: string\n  /**\n   * Amount to charge\n   */\n  amount: number\n  /**\n   * phone number of the customer\n   */\n  customer_phone?: string\n  /**\n   * URL to redirect to when transaction is completed.\n   */\n  redirect_url?: string\n  /**\n   * route country. Default NG\n   */\n  country?: string\n  /**\n   * currency to charge the card in. Default \"NGN\"\n   */\n  currency?: string\n  /**\n   * This allows you select the payment option you want for your users, possible values are card, account or both\n   */\n  payment_method?: string\n  /**\n   * Text to be displayed on the Rave Checkout Button\n   */\n  pay_button_text?: string\n  /**\n   * Unique transaction reference provided by the merchant\n   */\n  txref: string\n  /**\n   * This is a sha256 hash of your getpaidSetup values, it is used for passing secured values to the payment gateway\n   */\n  integrity_hash?: string\n  /**\n   * The value to be passed for this is 1. This is useful when customer is using an opera browser, it would load the payment modal on a new page.\n   */\n  hosted_payment?: 1\n  /**\n   * Any other custom data you wish to pass.\n   */\n  meta?: any\n  /**\n   * A function to be called on successful card charge. Userâs can always be redirected to a successful or failed page supplied by the merchant here based on response\n   * @param response?: The server response\n   */\n  callback: (response?: any) => void\n  /**\n   * A function to be called when the pay modal is closed.\n   */\n  onclose: () => void\n}","import { NgModule } from '@angular/core';\n\nimport { AngularRaveComponent } from './angular-rave.component';\nimport { AngularRaveDirective } from \"./angular-rave.directive\";\n\n@NgModule({\n  imports: [],\n  exports: [AngularRaveComponent, AngularRaveDirective],\n  declarations: [AngularRaveComponent, AngularRaveDirective],\n  providers: [],\n})\nexport class AngularRaveModule { }\n"],"names":[],"mappings":"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"}
